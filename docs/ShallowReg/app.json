[{"name":"server.R","content":"library(shiny)\nlibrary(MASS)\n\nchisqstats <- numeric()\n\n# Define server logic\nshinyServer(function(input, output,session) {\n  \ncloudInput <- reactive({\n  varcovar <- cbind(c(1,input$rho),c(input$rho,1))\n  rpoints <- mvrnorm(n=input$n,mu=c(0,0),Sigma=varcovar)\n  x <- rpoints[,1]\n  y <- rpoints[,2]\n  big <- max(abs(c(x,y)))*1.1\n  \n  mod <- lm(y~x)\n  x.bounds <- min(x)+(0:10)/10*(max(x)-min(x))\n  y.means <- numeric(10)\n  for (i in 1:10)  {\n    y.means[i] <- mean(y[x >= x.bounds[i] & x<=x.bounds[i+1]])\n  }\n\nreturn(list(x=x,y=y,big=big,mod=mod,x.bounds=x.bounds,y.means=y.means))\n\n})\n  \nshowlinesInput <- reactive({\n  input$showlines\n})\n\nshowsliceInput <- reactive({\n  input$showslice\n})\n  \noutput$showslice <- reactive({\n  showsliceInput()\n})\n\noutput$cloud <- renderPlot({\n   cloudinfo <- cloudInput()\n   x <- cloudinfo$x\n   y <- cloudinfo$y\n   big <- cloudinfo$big\n   mod <- cloudinfo$mod\n   x.bounds <- cloudinfo$x.bounds\n   y.means <- cloudinfo$y.means\n   \n  plot(x,y,pch=16,cex=0.4,col=rgb(0,0,1,0.7),\n       xlim=c(-big,big),ylim=c(-big,big))\n  \n  if (showlinesInput())  {\n    abline(coef(mod),col=\"blue\") #Regression Line\n    #Now for SD line.  This line also passes through\n    #(mean(x),mean(y)), but its slope is sd(y)/sd(x)\n    #(or - that if correlation is negative).  When the cloud\n    #is result of random sampling from bivariate normal\n    #distribtution, the SD line appears to describe the\n    #cloud better than the regression line does:\n    abline(mean(x)-mean(y)/coef(mod)[2],sign(coef(mod)[2])*sd(y)/sd(x),col=\"red\") \n    if(input$rho >= 0)  {\n      legend(\"topleft\", c(\"Regression Line\",\"SD Line\"),\n             fill = c(\"blue\", \"red\"),cex=0.7)\n    } else  {\n      legend(\"topright\", c(\"Regression Line\",\"SD Line\"),\n             fill = c(\"blue\", \"red\"),cex=0.7)\n    }      \n  }\n  \n  if (showsliceInput())  {\n    slice <- input$slice\n    rect(x.bounds[slice],-big,x.bounds[slice+1],big,\n         col=rgb(0,1,0,0.2))\n    lines(x=c(x.bounds[slice],x.bounds[slice+1]),y=c(y.means[slice],y.means[slice]),lwd=2)\n    x.val <- (x.bounds[slice]+x.bounds[slice+1])/2\n    points(x.val,y.means[slice],pch=16,cex=1)\n  }\n  \n  if(input$showmeans) {\n    x.vals <- (x.bounds[1:10]+x.bounds[2:11])/2\n    points(x.vals,y.means,cex=1,pch=16)\n    #Note that even though it is \"too shallow\"\n    #the regression line is the one to use for\n    #predicting y from x.\n  }\n  \n  },width=\"auto\",height=700\n  \n  )\n\n\n  })\n\n","type":"text"},{"name":"ui.R","content":"library(shiny)\nlibrary(shinythemes)\n\n# Define UI for SlowGoodness application\nfluidPage(\n  \n  #  Application title\n  titlePanel(\"Is the Regression Line too Shallow?\"),\n  theme = shinytheme(\"cerulean\"),\n  # Sidebar\n  sidebarPanel(\n    \n    sliderInput(\"n\",\"Number of Points in the Cloud\",min=100,max=2000,value=1200),\n   \n    sliderInput(\"rho\",\"Target Correlation of Cloud\",min=-1,max=1,step=.01,value=0.50),\n    \n    checkboxInput(\"showlines\",\"Show SD Line and Regression Line\",value=FALSE),\n    helpText(\"For some values of the correlation, the regression line\",\n             \"does not appear to pass through the cloud of points\",\n             \"as well as the SD line does. Try various correlations\",\n             \"and see for yourself!\"),\n    br(),\n    helpText(\"But the regression line does a better job of predicting y-values from\",\n             \"x-values.  To see this look at a vertical slice of the cloud:\"),\n    \n    checkboxInput(\"showslice\",\"Show a Slice of the Cloud\",value=FALSE),\n    \n    helpText(\"The big point in the green slice indicates the mean y-value\",\n             \"for all points in the slice.  Which line comes closer to it?\",\n             \"Try some other slices, too.\"),\n    \n    sliderInput(\"slice\",\"Choose a New Slice\",min=1,max=10,value=4,\n                animate=animationOptions(interval=1000,loop=TRUE)),\n    \n    helpText(\"To form an overall impression of how the regresion line\",\n             \"is doing, look at the means for all of the slices at once:\"),\n  \n    checkboxInput(\"showmeans\",\"Show Means of All Slices\",value=FALSE)\n\n    \n#     conditionalPanel(\n#       condition=\"output.showslice==TRUE\",\n#       sliderInput(\"slice\",\"Choose a New Slice\",min=1,max=10,value=4)\n#       ),\n#     \n#     conditionalPanel(\n#       condition=\"output.showslice==TRUE\",\n#       checkboxInput(\"showmeans\",\"Show Means of All Slices\",value=FALSE)\n#     )\n  ),\n  \n  \n  # Here comes the main panel\n  \n  mainPanel(\n    \n    plotOutput(\"cloud\")\n    \n  )\n  \n)\n","type":"text"}]
