[{"name":"server.R","content":"library(shiny)\r\n\r\nsource(\"normGraph.R\")\r\nsource(\"UnderShade.R\")\r\n\r\n# Define server logic for CoinFlip\r\nshinyServer(function(input, output) {\r\n  \r\n  simLimit <- 10000 #upper limit on number of sims at once\r\n\r\n  #Keep track of number of simulations in a given \"set-up\"\r\n  numberSims <- 0\r\n  successSims <- numeric()\r\n  allProps <- numeric()\r\n  latestSim <- 0\r\n  \r\n  # get intial info (needed for random \\reassignment)\r\n  \r\n  groupSizes <- reactive({\r\n    as.integer(unlist(strsplit(input$groupSizes,split=\",\")))\r\n  })\r\n  \r\n  successCounts <- reactive({\r\n    as.integer(unlist(strsplit(input$successCounts,split=\",\")))\r\n  })\r\n  \r\n  groupNames <- reactive({\r\n    unlist(strsplit(input$groupNames,split=\",\"))\r\n  })\r\n  \r\n  goodSizes <- reactive({\r\n    sizes <- as.integer(unlist(strsplit(input$groupSizes,split=\",\")))\r\n    goodSizes <- TRUE\r\n    if (any(is.na(sizes))) goodSizes <- FALSE\r\n    if (length(sizes) != 2) goodSizes <- FALSE\r\n    if (any(sizes < 1)) goodSizes <- FALSE\r\n    goodSizes\r\n  })\r\n  \r\n  goodCounts <- reactive({\r\n    counts <- as.integer(unlist(strsplit(input$successCounts,split=\",\")))\r\n    goodCounts <- TRUE\r\n    if (any(is.na(counts))) goodCounts <- FALSE\r\n    if (length(counts) != 2) goodCounts <- FALSE\r\n    if (any(counts < 0)) goodCounts <- FALSE\r\n    goodCounts\r\n  })\r\n  \r\n  goodNames <- reactive({\r\n    names <- unlist(strsplit(input$groupNames,split=\",\"))\r\n    goodNames <- TRUE\r\n    if (any(is.na(names))) goodNames <- FALSE\r\n    if (length(names) != 2) goodNames <- FALSE\r\n    goodNames\r\n  })\r\n  \r\nside <- reactive({\r\n  obsProps <- successCounts()/groupSizes()\r\n  if (obsProps[1] <= obsProps[2]) return(\"below\") else return(\"above\")\r\n})\r\n  \r\n  obsDiff <- reactive({\r\n    groupSizes <- groupSizes()\r\n    n1 <- groupSizes[1]\r\n    n2 <- groupSizes[2]\r\n    successCounts <- successCounts()\r\n    x1 <- successCounts[1]\r\n    x2 <- successCounts[2]\r\n    return(x1/n1-x2/n2)\r\n  })\r\n  \r\n  \r\n  #we also want the ability to refresh the \"set-up\"\r\n  total <- 0 #total number of sims over all set-ups including current one\r\n  totalPrev <- 0 #total number of sims over all set-ups excluding current one\r\n  \r\n  simsUpdate <- reactive({\r\n    if (input$resample > 0) {\r\n    groupSizes <- isolate(groupSizes())\r\n    n1 <- groupSizes[1]\r\n    n2 <- groupSizes[2]\r\n    successCounts <- isolate(successCounts())\r\n    x1 <- successCounts[1]\r\n    x2 <- successCounts[2]\r\n    \r\n    reps <- min(simLimit,isolate(input$sims))\r\n    \r\n    #think hypergemetric:\r\n    white <- x1+x2\r\n    urn <- n1+n2\r\n    black <- urn - white\r\n    \r\n    newSims <- rhyper(nn=reps,m=white,n=black,k=n1) #number of successes assigned to first group\r\n    successSims <<- c(successSims,newSims)\r\n    allProps <<- successSims/n1-(x1+x2-successSims)/n2\r\n    latestSim <<- newSims[reps]\r\n    numberSims <<- numberSims + reps\r\n    total <<- total+reps\r\n    \r\n    } #end if\r\n    \r\n    })\r\n\r\n  \r\n  diffProps <- reactive({\r\n    simsUpdate() # for the dependency\r\n    groupSizes <- isolate(groupSizes())\r\n    n1 <- groupSizes[1]\r\n    n2 <- groupSizes[2]\r\n    successCounts <- isolate(successCounts())\r\n    x1 <- successCounts[1]\r\n    x2 <- successCounts[2]\r\n    return(latestSim/n1-(x1+x2-latestSim)/n2)\r\n  })\r\n  \r\n  \r\n  #this erases the simulation history and puts user back to initial graph\r\n  simsReset <- reactive({\r\n    input$reset\r\n    totalPrev <<- totalPrev + numberSims\r\n    numberSims <<- 0\r\n    successSims <<- numeric()\r\n    latestSim <<- 0\r\n    return(totalPrev)\r\n  })\r\n\r\n\r\n#help with conditonal panals\r\noutput$totalPrev <- reactive({\r\n  simsReset()\r\n})\r\n  \r\n  # needed for the conditional panels to work\r\n  outputOptions(output, 'totalPrev', suspendWhenHidden=FALSE)\r\n\r\noutput$total <- reactive({\r\n  simsUpdate() #for dependency\r\n  total\r\n})\r\n\r\n# needed for the conditional panels to work\r\noutputOptions(output, 'total', suspendWhenHidden=FALSE)\r\n  \r\n  \r\n  output$barGraphInitial <- renderPlot({\r\n    \r\n    validate(\r\n      need(goodNames(),\"\")\r\n    )\r\n    \r\n    validate(\r\n      need(goodSizes(),\"\")\r\n    )\r\n    \r\n    validate(\r\n      need(goodCounts(),\"\")\r\n    )\r\n    \r\n    validate(\r\n      need(all(successCounts()<=groupSizes()),\"\")\r\n    )\r\n    \r\n    groupSizes <- groupSizes()\r\n    n1 <- groupSizes[1]\r\n    n2 <- groupSizes[2]\r\n    n <- n1+n2\r\n    successCounts <- successCounts()\r\n    x1 <- successCounts[1]\r\n    x2 <- successCounts[2]\r\n    \r\n    p <- (x1+x2)/n\r\n    \r\n    groupNames <- groupNames()\r\n    group1 <- groupNames[1]\r\n    group2 <- groupNames[2]\r\n    \r\n    success <- input$success\r\n    \r\n    observed <- c(x1,x2)\r\n    expected <- c(p*n1,p*n2)\r\n    tab <- rbind(observed,expected)\r\n    rownames(tab) <-c(\"Observed\",\"Expected\")\r\n    colnames(tab) <- c(paste(group1,success,\" count\"),\r\n                       paste(group2,success,\" count\"))\r\n    barplot(tab,beside=T,col=c(\"#ee7700\",\"grey\"),\r\n            main=\"Bargraph of Observed and Expected Counts\",xlab=\"\",ylab=\"Counts\",\r\n            legend.text=TRUE)\r\n  })\r\n  \r\n  output$remarksInitial <- renderText({\r\n    \r\n    validate(\r\n      need(goodNames(),\"\")\r\n    )\r\n    \r\n    validate(\r\n      need(goodSizes(),\"\")\r\n    )\r\n    \r\n    validate(\r\n      need(goodCounts(),\"\")\r\n    )\r\n    \r\n    validate(\r\n      need(all(successCounts()<=groupSizes()),\"\")\r\n    )\r\n    \r\n    paste(\"The bar graph above compares the number of successes actually observed in each group\",\r\n          \"with the numbers that you would expect if group makes no difference for the response.\")\r\n  })\r\n\r\noutput$remarksInitialMore <- renderText({\r\n  \r\n  validate(\r\n    need(goodNames(),\"\")\r\n  )\r\n  \r\n  validate(\r\n    need(goodSizes(),\"\")\r\n  )\r\n  \r\n  validate(\r\n    need(goodCounts(),\"\")\r\n  )\r\n  \r\n  validate(\r\n    need(all(successCounts()<=groupSizes()),\"\")\r\n    )\r\n  \r\n    diff <- obsDiff()\r\n    \r\n    groupNames <- isolate(groupNames())\r\n    group1 <- groupNames[1]\r\n    group2 <- groupNames[2]\r\n    \r\n    paste0(\"In this experiment, the difference in sample proportions (\",\r\n           group1,\" - \",group2,\") = \",round(100*diff,2),\r\n           \" percent.\")\r\n  \r\n})\r\n\r\noutput$initialTwoWay <- renderTable({\r\n  \r\n  \r\n  validate(\r\n    need(goodNames(),\"Enter exactly two group names, separated by a comma.\")\r\n  )\r\n  \r\n  validate(\r\n    need(goodSizes(),\"Enter the group sizes as two positive whole numbers, separated by a comma.\")\r\n  )\r\n  \r\n  validate(\r\n    need(goodCounts(),\"Enter the success counts as two non-negative whole numbers, separated by a comma.\")\r\n  )\r\n  \r\n  validate(\r\n    need(all(successCounts()<=groupSizes()),\r\n         paste0(\"One of the groups has more successes than it has members! \",\r\n                \"Did you enter the number in the correct order?\")\r\n    )\r\n  )\r\n  \r\n  groupSizes <- groupSizes()\r\n  n1 <- groupSizes[1]\r\n  n2 <- groupSizes[2]\r\n  n <- n1+n2\r\n  successCounts <- successCounts()\r\n  x1 <- successCounts[1]\r\n  x2 <- successCounts[2]\r\n  groupNames <- groupNames()\r\n  group1 <- groupNames[1]\r\n  group2 <- groupNames[2]\r\n  \r\n  p1hat <- round(x1/n1,4)\r\n  p2hat <- round(x2/n2,4)\r\n  \r\n  tab <- rbind(c(as.character(x1),as.character(n1-x1),as.character(p1hat)),\r\n               c(as.character(x2),as.character(n2-x2),as.character(p2hat)))\r\n  rownames(tab) <- groupNames\r\n  colnames(tab) <- c(input$success,input$failure,\"Proportion\")\r\n  tab\r\n})\r\n  \r\n  output$remarksLatest1 <- renderText({\r\n\r\n    diff <- diffProps()\r\n    \r\n    groupNames <- isolate(groupNames())\r\n    group1 <- groupNames[1]\r\n    group2 <- groupNames[2]\r\n    \r\n    paste0(\"For the latest simulation, the difference in sample proportions (\",\r\n      group1,\" - \",group2,\") = \",round(100*diff,2),\r\n      \" percent.\")\r\n    \r\n\r\n  })\r\n\r\noutput$latestTwoWayBar <- renderTable({\r\n  simsUpdate() #for the dependency\r\n  groupSizes <- isolate(groupSizes())\r\n  n1 <- groupSizes[1]\r\n  n2 <- groupSizes[2]\r\n  successCounts <- isolate(successCounts())\r\n  x1 <- successCounts[1]\r\n  x2 <- successCounts[2]\r\n  groupNames <- isolate(groupNames())\r\n  group1 <- groupNames[1]\r\n  group2 <- groupNames[2]\r\n  \r\n  p1hat <- round(latestSim/n1,4)\r\n  p2hat <- round((x1+x2-latestSim)/n2,4)\r\n  \r\n  tab <- rbind(c(as.character(latestSim),as.character(n1-latestSim),as.character(p1hat)),\r\n               c(as.character(x1+x2-latestSim),as.character(n2-x1-x2+latestSim),as.character(p2hat)))\r\n  rownames(tab) <- groupNames\r\n  colnames(tab) <- c(input$success,input$failure,\"Proportion\")\r\n  tab\r\n})\r\n  \r\n  output$remarksLatest2 <- renderText({\r\n    \r\n\r\n    diff <- diffProps()\r\n    \r\n    groupNames <- isolate(groupNames())\r\n    group1 <- groupNames[1]\r\n    group2 <- groupNames[2]\r\n    \r\n    paste0(\"For the latest simulation, the difference in sample proportions (\",\r\n           group1,\" - \",group2,\") = \",round(100*diff,2),\r\n                                             \" percent.\")\r\n    \r\n\r\n    \r\n  })\r\n\r\noutput$latestTwoWayDen <- renderTable({\r\n  simsUpdate() #for the dependency\r\n  groupSizes <- isolate(groupSizes())\r\n  n1 <- groupSizes[1]\r\n  n2 <- groupSizes[2]\r\n  successCounts <- isolate(successCounts())\r\n  x1 <- successCounts[1]\r\n  x2 <- successCounts[2]\r\n  groupNames <- isolate(groupNames())\r\n  group1 <- groupNames[1]\r\n  group2 <- groupNames[2]\r\n  \r\n  p1hat <- round(latestSim/n1,4)\r\n  p2hat <- round((x1+x2-latestSim)/n2,4)\r\n  \r\n  tab <- rbind(c(as.character(latestSim),as.character(n1-latestSim),as.character(p1hat)),\r\n               c(as.character(x1+x2-latestSim),as.character(n2-x1-x2+latestSim),as.character(p2hat)))\r\n  rownames(tab) <- groupNames\r\n  colnames(tab) <- c(input$success,input$failure,\"Proportion\")\r\n  tab\r\n})\r\n  \r\n  \r\n  output$barGraphLatest <- renderPlot({\r\n    \r\n    input$resample #gets the dependency\r\n    \r\n    groupSizes <- isolate(groupSizes())\r\n    n1 <- groupSizes[1]\r\n    n2 <- groupSizes[2]\r\n    n <- n1+n2\r\n    successCounts <- isolate(successCounts())\r\n    x1 <- successCounts[1]\r\n    x2 <- successCounts[2]\r\n    \r\n    groupNames <- isolate(groupNames())\r\n    group1 <- groupNames[1]\r\n    group2 <- groupNames[2]\r\n    \r\n    success <- isolate(input$success)\r\n    \r\n    if (numberSims > 0) {\r\n    \r\n    p <- (x1+x2)/n\r\n      \r\n    observed <- c(x1,x2)\r\n    expected <- c(p*n1,p*n2)\r\n    simulated <- c(latestSim,x1+x2-latestSim)\r\n    tab <- rbind(observed,expected,simulated)  \r\n      \r\n    rownames(tab) <-c(\"Observed\",\"Expected\",\"Simulated\")\r\n    colnames(tab) <- c(paste0(success,\" count (\",group1,\")\"),\r\n                       paste0(success,\" count (\",group2,\")\"))\r\n    barplot(tab,beside=T,col=c(\"#ee7700\",\"grey\",\"#3333ff\"),\r\n            main=\"Bargraph of Observed, Expected, and Latest Simulation\",xlab=\"\",\r\n            ylab=\"Counts\",\r\n            legend.text=TRUE)\r\n  } # end if\r\n  \r\n    \r\n  })\r\n  \r\n  output$density <-\r\n  \r\n# if we want to go back to using a historgram:\r\n#     renderPlot({\r\n#     diff <- diffProps() #also gives us the dependency\r\n#     \r\n#     hist(allProps,\r\n#        xlab=\"Difference\",\r\n#        main=\"Distribution of Differences in Group Proportions\"\r\n#           )\r\n#     points(diff,0,col=\"red\",pch=19,cex=2)\r\n#     \r\n#     abline(v=isolate(obsDiff()))\r\n    \r\n    renderPlot({\r\n      input$resample\r\n      if (length(allProps)==1) band <- 1 else band <- \"nrd0\"\r\n      dprops <- density(allProps,n=500,bw=band)\r\n      plot(dprops$x,dprops$y,type=\"l\",col=\"blue\",\r\n           xlab=\"Difference\",ylab=\"Estimated Density\",\r\n           main=\"Distribution of Resampled Differences\")\r\n      latest <- allProps[length(allProps)]\r\n      points(latest,0,col=\"red\",pch=19)\r\n      abline(v=isolate(obsDiff()))\r\n           \r\n    })\r\n    \r\noutput$summary1 <- renderTable({\r\n  simsUpdate() #for the dependency\r\n\r\n  observed <- isolate(obsDiff())\r\n  number <- numberSims\r\n  if (side() == \"above\") {\r\n    extremeCount <- length(allProps[allProps >= observed])\r\n    } else {\r\n    extremeCount <- length(allProps[allProps <= observed])\r\n    }\r\n    extremeCount <- as.integer(extremeCount)\r\n  percent <- paste0(round(100*extremeCount/number,2),\"%\")\r\n  if (side() == \"above\") {\r\n    tab <- data.frame(as.integer(number),extremeCount,percent)\r\n    names(tab) <- c(\"Simulated Differences\",\"Number >= Observed Diff\",\"Percentage\")\r\n  } else {\r\n    tab <- data.frame(as.integer(number),extremeCount,percent)\r\n    names(tab) <- c(\"Simulations\",\"Number <= Observed Diff\",\"Percentage\")\r\n  }\r\n  tab\r\n  \r\n\r\n})\r\n\r\noutput$summary2 <- renderTable({\r\n  simsUpdate() #for the dependency\r\n  \r\n\r\n  observed <- isolate(obsDiff())\r\n  \r\n  number <- numberSims\r\n  if (side() == \"above\") {\r\n    extremeCount <- length(allProps[allProps >= observed])\r\n  } else {\r\n    extremeCount <- length(allProps[allProps <= observed])\r\n  }\r\n  extremeCount <- as.integer(extremeCount)\r\n  percent <- paste0(round(100*extremeCount/number,2),\"%\")\r\n  if (side() == \"above\") {\r\n    tab <- data.frame(as.integer(number),extremeCount,percent)\r\n    names(tab) <- c(\"Simulated Differences\",\"Number >= Observed Diff\",\"Percentage\")\r\n  } else {\r\n    tab <- data.frame(as.integer(number),extremeCount,percent)\r\n    names(tab) <- c(\"Simulations\",\"Number <= Observed Diff\",\"Percentage\")\r\n  }\r\n  tab\r\n  \r\n\r\n})\r\n \r\noutput$normalCurve <- renderPlot({\r\n\r\n  groupSizes <- isolate(groupSizes())\r\n  n1 <- groupSizes[1]\r\n  n2 <- groupSizes[2]\r\n  successCounts <- isolate(successCounts())\r\n  x1 <- successCounts[1]\r\n  x2 <- successCounts[2]\r\n  \r\n  observed <- isolate(obsDiff())\r\n  \r\n  #This needs to be improved (or should it be??)\r\n  p <- (x1+x2)/(n1+n2)\r\n  sdDiff <- sqrt(p*(1-p)*(1/n1+1/n2))\r\n  \r\n  \r\n  if (side() == \"above\") {\r\n  normGraph(bound=observed,region=\"above\",mean=0,sd=sdDiff)\r\n  \r\n  } else {\r\n    normGraph(bound=observed,region=\"below\",mean=0,sd=sdDiff)\r\n  }\r\n  \r\n\r\n})\r\n\r\noutput$remarksProb <- renderText({\r\n  \r\n  observed <- obsDiff()\r\n  if (side() == \"above\") {\r\n  paste0(\"The curve above approximates the histogram you would get if you could simulate many, many times.\",\r\n        \" The shaded area gives an approximate probability of getting an observed difference in proportions\",\r\n       \"of \",round(observed,3),\" or more, if group makes no difference in the response.\")\r\n  } else {\r\n    paste0(\"The curve above approximates the histogram you would get if you could simulate many, many times.\",\r\n           \" The shaded area gives an approximate probability of getting an observed difference in proportions\",\r\n           \"of \",round(observed,3),\" or less, if group makes no difference in the response.\")\r\n  }\r\n})\r\n  \r\n})\r\n  \r\n","type":"text"},{"name":"ui.R","content":"library(shiny)\r\n\r\n# Define UI for RandomExpBinom application\r\nshinyUI(pageWithSidebar(\r\n  \r\n  #  Application title\r\n  headerPanel(\"A Randomized Experiment With a Two-Value Response\"),\r\n  \r\n  # Sidebar\r\n  sidebarPanel(\r\n    conditionalPanel(\r\n      condition=\"input.resample == 0 || output.totalPrev == output.total\",\r\n      helpText(\"You can use your own names for each of the two treatment, or\",\r\n             \"stick with the default names below\"),\r\n      textInput(\"groupNames\",\"Enter group names (separated by a comma)\",\r\n              \"GreeterYawns,Control\"),\r\n      textInput(\"groupSizes\",\"Enter group sizes (separated by a comma)\",\r\n              \"34,16\"),\r\n      helpText(\"You can use your own names for the values of the response,\",\r\n             \"variable or stick with the default below\"),\r\n      textInput(\"success\",\"Name of a Success\",\"yawns\"),\r\n      textInput(\"failure\",\"Name of a Failure\",\"none\"),\r\n      helpText(\"Enter the number of successes in each group\",\r\n             \"separated by a comma.\"),\r\n      textInput(\"successCounts\",\"Enter success counts\",\r\n              \"10,4\")\r\n    ),\r\n    helpText(\"One simulation means the machine will randomly assign subjects\",\r\n             \"to the two groups, with sizes as specified.  How many do\",\r\n             \"you want to perform at once?  (Limit is 10000.)\"),\r\n    numericInput(\"sims\",\"Number of Simulations at Once\",1,min=0,step=1),\r\n    br(),\r\n    actionButton(\"resample\",\"Simulate Now\"),\r\n    conditionalPanel(\r\n      condition=\"(input.resample > 0 && input.reset == 0) || output.total > output.totalPrev\",\r\n      actionButton(\"reset\",\"Start Over\")\r\n    )\r\n    \r\n    ),\r\n\r\n  \r\n  # Here comes the main panel\r\n  \r\n     mainPanel(\r\n    \r\n    conditionalPanel(\r\n      condition=\"input.resample == 0 || output.totalPrev == output.total\",\r\n      HTML(\"<p>Here is a two-way table of the observed results, along with the proportion\r\n           of successes in each group.<\/p>\"),\r\n      tableOutput(\"initialTwoWay\"),\r\n      p(textOutput(\"remarksInitialMore\")),\r\n      plotOutput(\"barGraphInitial\"),\r\n      p(textOutput(\"remarksInitial\"))\r\n      ),\r\n    \r\n    conditionalPanel(\r\n      condition=\"(input.resample > 0 && input.reset == 0) || output.total > output.totalPrev\",\r\n      tabsetPanel(selected=\"Latest Simulation\",\r\n        tabPanel(\"Latest Simulation\",\r\n               HTML(\"<p>Here is a two-way table of the latest simulation, along with \r\n                  the proportion of successes in each group.<\/p>\"),\r\n               tableOutput(\"latestTwoWayBar\"),\r\n               p(textOutput(\"remarksLatest1\")),\r\n               plotOutput(\"barGraphLatest\"),\r\n               tableOutput(\"summary1\")),\r\n        tabPanel(\"Density Curve of Differences\",\r\n               HTML(\"<p>Here is a two-way table of the latest simulation, along with \r\n                  the proportion of successes in each group.<\/p>\"),\r\n               tableOutput(\"latestTwoWayDen\"),\r\n               p(textOutput(\"remarksLatest2\")),\r\n               plotOutput(\"density\"),\r\n               HTML(\"\r\n                  <ul>\r\n                    <li>The vertical line (if present) shows the difference in the actual experiment.<\/li>\r\n                    <li>The red dot shows the difference from the last simulation..<\/li>\r\n                  <\/ul>\"\r\n                    ),\r\n               tableOutput(\"summary2\")),\r\n        tabPanel(\"Probability Distribution\",\r\n                 plotOutput(\"normalCurve\"),\r\n                 p(textOutput(\"remarksProb\")),\r\n                 HTML(\"<p><strong>Warning!<\/strong>  The approximation can be rather poor when\r\n                      there is a small number of successes or a small number of failures in \r\n                      each group.<\/p>\")\r\n                 ),\r\n        id=\"MyPanel\"\r\n    )\r\n    )\r\n    \r\n    \r\n  )\r\n  \r\n))\r\n","type":"text"},{"name":"UnderShade.R","content":"#' @title Shade Under Density Curves\r\n\r\n#' @description Utility function for ptGC, pnormGC, pchisqGC, possibly others\r\n#' @keywords internal\r\n#' @rdname UnderShade\r\n#' @usage UnderShade(low,high,func,...)\r\n#' @param low lower bound\r\n#' @param high upper bound\r\n#' @param func density function\r\n#' @param \\ldots other arguments passed (to modify func)\r\n#' @return graphical side effect only\r\n#' @author Homer White \\email{hwhite0@@georgetowncollege.edu}\r\nUnderShade <- function(low,high,func,...) { #Utility\r\n  x.coords <- c(low,seq(low,high,length.out=301),high)\r\n  y.coords <- c(0,func(seq(low,high,length.out=301),...),0)\r\n  polygon(x.coords,y.coords,col=\"lightblue\",cex=2)\r\n}","type":"text"},{"name":"normGraph.R","content":"# Modifed from pnormGC() in tigerstats package\r\n# setting graph default value to TRUE, no area returned to console, round mean and sd\r\n\r\nnormGraph <- function(bound,region=\"below\",mean=0,sd=1,graph=TRUE) {\r\n  if (!is.numeric(bound)) stop(\"Specify one or two numerical boundaries\")\r\n  if (length(bound)==1 & !(region %in% c(\"below\",\"above\"))) stop(\"Specify region=\\\"below\\\" or\r\n          region=\\\"above\\\"\")\r\n  if (length(bound)==2 & !(region %in% c(\"between\",\"outside\"))) stop(\"Specify region=\\\"between\\\" or\r\n          region=\\\"outside\\\"\")\r\n  if (length(bound)>2) stop(\"Specify one or two numerical boundaries\")\r\n\r\n  if (length(bound)==2 & bound[1]>bound[2])  bound <- rev(bound)\r\n\r\n  if (grepl(\"^be[lf]\",region,perl=TRUE))  {\r\n    area <- pnorm(bound,mean=mean,sd=sd)\r\n    if (graph) {\r\n    upper <- max(qnorm(.9999,mean=mean,sd=sd),bound+0.1*sd)\r\n    lower <- min(qnorm(0.0001,mean=mean,sd=sd),bound-0.1*sd)\r\n    curve(dnorm(x,mean=mean,sd=sd),from=lower,to=upper,ylab=\"density\",axes=FALSE,n=50,\r\n          main=paste(\"Normal Curve, mean = \",round(mean,2),\", SD = \",round(sd,2),\"\\n Shaded Area = \",\r\n                     round(area,4)))\r\n    UnderShade(low=lower,high=bound,func=dnorm,mean=mean,sd=sd)\r\n    axis(2)\r\n    places <- c(lower,bound,mean,upper)\r\n    axis(1,at=places,labels=c(\"\",as.character(round(places[2:3],3)),\"\"))\r\n    }\r\n  }\r\n\r\n  if (grepl(\"^a[bf]\",region,perl=TRUE))  {\r\n    area <- pnorm(bound,mean=mean,sd=sd,lower.tail=FALSE)\r\n    if (graph) {\r\n    upper <- max(qnorm(.9999,mean=mean,sd=sd),bound+0.1*sd)\r\n    lower <- min(qnorm(0.0001,mean=mean,sd=sd),bound-0.1*sd)\r\n    curve(dnorm(x,mean=mean,sd=sd),from=lower,to=upper,ylab=\"density\",axes=FALSE,n=50,\r\n          main=paste(\"Normal Curve, mean = \",round(mean,2),\", SD = \",round(sd,2),\"\\n Shaded Area = \",\r\n                     round(area,4)))\r\n    UnderShade(low=bound,high=upper,func=dnorm,mean=mean,sd=sd)\r\n    axis(2)\r\n    places <- c(lower,bound,mean,upper)\r\n    axis(1,at=places,labels=c(\"\",as.character(round(places[2:3],3)),\"\"))\r\n    }\r\n  }\r\n  \r\n  if (grepl(\"^bet|^in\",region,perl=TRUE))  {\r\n    area <- pnorm(bound[2],mean=mean,sd=sd)-pnorm(bound[1],mean=mean,sd=sd)\r\n    if (graph) {\r\n    upper <- max(qnorm(.9999,mean=mean,sd=sd),bound+0.1*sd)\r\n    lower <- min(qnorm(0.0001,mean=mean,sd=sd),bound-0.1*sd)\r\n    curve(dnorm(x,mean=mean,sd=sd),from=lower,to=upper,ylab=\"density\",axes=FALSE,n=50,\r\n          main=paste(\"Normal Curve, mean = \",round(mean,2),\", SD = \",round(sd,2),\"\\n Shaded Area = \",\r\n                     round(area,4)))\r\n    UnderShade(low=bound[1],high=bound[2],func=dnorm,mean=mean,sd=sd)\r\n    axis(2)\r\n    places <- c(lower,bound[1],bound[2],upper)\r\n    axis(1,at=places,labels=c(\"\",as.character(places[2:3]),\"\"))\r\n    }\r\n  }\r\n  \r\n  if (grepl(\"^out\",region,perl=TRUE))  {\r\n    area <- pnorm(bound[1],mean=mean,sd=sd)+pnorm(bound[2],mean=mean,sd=sd,lower.tail=FALSE)\r\n    if (graph) {\r\n    upper <- max(qnorm(.9999,mean=mean,sd=sd),bound+0.1*sd)\r\n    lower <- min(qnorm(0.0001,mean=mean,sd=sd),bound-0.1*sd)\r\n    curve(dnorm(x,mean=mean,sd=sd),from=lower,to=upper,ylab=\"density\",axes=FALSE,n=50,\r\n          main=paste(\"Normal Curve, mean = \",round(mean,2),\", SD = \",round(sd,2),\"\\n Shaded Area = \",\r\n                     round(area,4)))\r\n    UnderShade(low=lower,high=bound[1],func=dnorm,mean=mean,sd=sd)\r\n    UnderShade(low=bound[2],high=upper,func=dnorm,mean=mean,sd=sd)\r\n    axis(2)\r\n    places <- c(lower,bound[1],bound[2],upper)\r\n    axis(1,at=places,labels=c(\"\",as.character(places[2:3]),\"\"))\r\n    }\r\n  }\r\n  \r\n  # return(area) we need only the graphs\r\n\r\n}#end of pnormGC","type":"text"},{"name":"shinyapps/homer/RandomExpBinom.dcf","content":"name: RandomExpBinom\r\naccount: homer\r\nbundleId: 34183\r\nurl: http://homer.shinyapps.io/RandomExpBinom\r\n","type":"text"}]
