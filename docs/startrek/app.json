[{"name":"app.R","content":"## Shiny app to play Star Trek\n\n\n## attach necessary packages:\nlibrary(shinydashboard)\nlibrary(shinyjs)\n\n## globals ----\n\nklingon_step <- function(dist) {\n  15 - dist / 5\n}\nklingon_angle_fuzz <- pi / 4\nship <- c(x = 50, y = 50)\ndim <- 100\ninterval <- 2000\nshields_initial <- 100\ntorpedo_radius <- function(d) {\n  5 - d / 15\n}\ninitial_torpedoes <- 10\n\nget_initial_location <- function() {\n  angle <- runif(1, 0, 2 * pi)\n  ship + dim / 2 * c(x = cos(angle), y = sin(angle))\n}\n\nmove <- function(len, pos, target) {\n  angle_to_target <-\n    atan2(\n      y = target[\"y\"] - pos[\"y\"],\n      x = target[\"x\"] - pos[\"x\"]\n    )\n  movement_angle <- runif(\n    1,\n    angle_to_target - klingon_angle_fuzz,\n    angle_to_target + klingon_angle_fuzz\n  )\n  len * c(x = cos(movement_angle), y = sin(movement_angle))\n}\n\nklingon_shot <- function(dist) {\n  upper <- min(dim / 2 - dist, 15)\n  round(runif(1, min = 0, max = upper), digits = 1)\n}\n\ndistance <- function(x1, y1, x2, y2) {\n  sqrt((x1 - x2)^2 + (y1 - y2)^2)\n}\n\n\n## user interface ----\nui <- shinyUI(\n  dashboardPage(\n    skin = \"blue\",\n    dashboardHeader(title = \"Star Trek\"),\n    dashboardSidebar(\n      sidebarMenu(\n        id = \"menu\",\n        menuItem(\n          \"About the Game\",\n          icon = icon(\"circle-info\"),\n          tabName = \"about\"\n        ),\n        menuItem(\n          \"Star Trek\",\n          tabName = \"game\",\n          icon = icon(\"star\")\n        )\n      )\n    ),\n    dashboardBody(\n      useShinyjs(),\n      tabItems(\n        tabItem(\n          tabName = \"game\",\n          fluidRow(\n            column(\n              width = 8,\n              htmlOutput(\"scotty\", style = \"margin: auto\")\n            ),\n            column(\n              width = 2,\n              actionButton(\n                inputId = \"start\",\n                label = \"Start Game\"\n              )\n            ),\n            column(\n              width = 2,\n              hidden(\n                actionButton(\n                  inputId = \"restart\",\n                  label = \"Play Again\"\n                )\n              )\n            ),\n            br(), br(),\n            plotOutput(\"plot\", height = \"auto\", click = \"expl\")\n          )\n        ),\n        tabItem(\n          tabName = \"about\",\n          markdown(\n            \"\n# Welcome to Star Trek!\n\n## The Situation\n\nYour star ship, the *The Enterprise*, is the blue circle in the center of the field.  A Klingon ship (the red dot) is approaching.  Every two seconds its moves, bobbing and weaving somewhat randomly, but generally making its way toward the *Enterprise*.\n\nWhen it moves the Klingon ship also fires at the *Enterprise*:  the closer it gets, the more damage it can do. It also moves faster as it gets closer.\n\n## Shields\n\nThe *Enterprise* shields are initially rated at 100 units, but the rating decreases as the *Enterprise* sustains fires from the Klingon ship.  If the shield-rating falls below zero, the *Enterprise* will be destroyed.\n\n## Photon Torpedoes\n\nThe *Enterprise* is equipped with ten photon torpedoes.  You can fire a torpedo by clicking on a point in the field:  the torpedo will be launched from the *Enterprise* and will proceed to the click-point, exploding when it gets there.  If the Klingon ship is within the the lethal radius of the blast, it will be destroyed.  The further the blast-point is from the Enterprise, however, the smaller the lethal radius will be.\n\nYou can fire torpedoes as often as you like.  Every two seconds the screen will reveal the path and blast-radius of the torpedoes you have fired during that time, and your Chief Engineer Mr. Scot will report on the current shield-level and the number of torpedoes left to fire.\n            \"\n          )\n        )\n      )\n    ) # end dashboard body\n  ) # end dashboard page\n) # end shinyUI\n\n\n## server logic ----\nserver <- function(input, output, session) {\n  rv <- reactiveValues(\n    klingon = get_initial_location(),\n    shields = shields_initial,\n    shot = NULL,\n    klingon_alive = TRUE,\n    torpedo_supply = initial_torpedoes,\n    step = 0\n  )\n\n\n  observeEvent(input$restart, {\n    rv$klingon <- get_initial_location()\n    rv$shields <- shields_initial\n    rv$shot <- NULL\n    rv$klingon_alive <- TRUE\n    rv$torpedo_supply <- initial_torpedoes\n    rv$step <- 0\n  })\n\n  observeEvent(input$start, {\n    hide(\"start\")\n    show(\"restart\")\n  })\n\n  observeEvent(input$expl, {\n    req(input$start)\n    if (rv$torpedo_supply > 0) {\n      rv$shot <- c(rv$shot, list(input$expl))\n      rv$torpedo_supply <- rv$torpedo_supply - 1\n    }\n  })\n\n  observe({\n    req(input$start)\n    req(input$menu == \"game\")\n    invalidateLater(interval, session)\n\n    isolate({\n      if (rv$step > 0) {\n        k <- rv$klingon\n        s <- rv$shields\n        if (s > 0 & rv$klingon_alive) {\n          d <- distance(ship[1], ship[2], k[1], k[2])\n          nl <- k + move(\n            len = klingon_step(d),\n            pos = k,\n            target = ship\n          )\n          rv$klingon <- nl\n          d <- distance(ship[1], ship[2], nl[1], nl[2])\n          rv$shields <- s - klingon_shot(d)\n        }\n        if (!is.null(rv$shot)) {\n          for (i in 1:length(rv$shot)) {\n            expl <- rv$shot[[i]]\n            range <- distance(expl$x, expl$y, ship[1], ship[2])\n            k <- rv$klingon\n            d <- distance(expl$x, expl$y, k[1], k[2])\n            if (d < torpedo_radius(range)) {\n              rv$klingon_alive <- FALSE\n            }\n          }\n        }\n      }\n    })\n    isolate(rv$step <- rv$step + 1)\n  })\n\n\n  output$plot <- renderPlot(\n    {\n      rv$step\n      isolate({\n        s <- rv$shields\n        ks <- rv$klingon_alive\n        klingon_color <- ifelse(ks, \"red\", \"black\")\n        if (s > 0) {\n          plot(\n            x = ship[\"x\"], y = ship[\"y\"],\n            col = \"blue\", cex = 2, pch = 19,\n            xlim = c(0, dim), ylim = c(0, dim),\n            axes = FALSE, xlab = \"\", ylab = \"\", asp = 1\n          )\n          graphics::box(lwd = 3)\n          if (!is.null(rv$shot)) {\n            for (i in 1:length(rv$shot)) {\n              expl <- rv$shot[[i]]\n              lines(\n                x = c(ship[\"x\"], expl$x),\n                y = c(ship[\"y\"], expl$y),\n                col = \"yellow\",\n                lwd = 2\n              )\n              range <- distance(expl$x, expl$y, ship[1], ship[2])\n              symbols(\n                expl$x, expl$y,\n                circles = torpedo_radius(range), add = TRUE,\n                inches = FALSE,\n                fg = \"orange\",\n                lwd = 2\n              )\n            }\n            rv$shot <- NULL\n          }\n          points(\n            x = rv$klingon[\"x\"],\n            y = rv$klingon[\"y\"],\n            col = klingon_color, cex = 1, pch = 19\n          )\n        }\n      })\n    },\n    width = 600,\n    height = 600\n  )\n\n  output$scotty <- renderText({\n    rv$step\n    isolate({\n      s <- rv$shields\n      t <- rv$torpedo_supply\n      if (s > 0 & rv$klingon_alive) {\n        scotty_message <-\n          paste0(\"<p>Shields are down to \", round(s, digits = 2),\n            \" Cap'n!  We have \",\n            t, \" torpedoes left.<\/p>\",\n            sep = \"\"\n          )\n      } else if (s > 0 & !rv$klingon_alive) {\n        scotty_message <- \"Ya got 'em, Cap'n!\"\n      } else {\n        scotty_message <- \"We're done for, Cap'n!\"\n      }\n      scotty_message\n    })\n  })\n}\n\n## run the app ----\nshinyApp(ui, server)\n","type":"text"}]
