[{"name":"app.R","content":"## spellbound (primitive version)\n\nlibrary(shiny)\nlibrary(stringr)\nlibrary(shinyjs)\nlibrary(words)\nlibrary(glue)\n\n## Globals ----\n\n## time allowed (sec):\ntime_allowed <- 60\nlexicon <- words::words$word\n## number of letters provided:\nn <- 12\n# weight on chance of vowel:\nvowel_weight <- 5\n## function to determine if a word can be formed from letters\ncheck_entry <- function(entry, letters) {\n  cl <- str_c(letters, collapse = \"\")\n  entry_letters <- str_split(entry, pattern = \"\") |> unlist() |> unique()\n  formable <- TRUE\n  for (letter in entry_letters) {\n    if (str_count(entry, letter) > str_count(cl, letter)) {\n      formable <- FALSE\n    }\n  }\n  list(formable = formable, is_word = entry %in% lexicon)\n}\n\n## ui ----\nui <- pageWithSidebar(\n  headerPanel(\"Spellbound\"),\n  sidebarPanel(\n    useShinyjs(),\n    actionButton(\"play\", \"Play Spellbound\"),\n    hidden(\n      div(\n        id = \"controls\",\n        textInput(\"entry\", \"Make a word:\"),\n        actionButton(\"submit\", \"Submit Entry\")\n      )\n    )\n  ),\n  mainPanel(\n    hidden(\n      div(\n        id = \"info\",\n        verbatimTextOutput(\"letters\"),\n        verbatimTextOutput(\"response\")\n      )\n    )\n  )\n)\n\n## server logic ----\nserver <- function(input, output, session) {\n  \n  rv <- reactiveValues(\n    letters = NULL,\n    words = character(),\n    playing = FALSE,\n    time = Sys.time(),\n    score = 0,\n    attempts = 0,\n    results = NULL\n  )\n  \n  observeEvent(input$play, {\n    vowels <- c(\"a\", \"e\", \"i\", \"o\", \"u\")\n    cons <- setdiff(letters, vowels)\n    probs <- c(rep(vowel_weight, length(vowels)), rep(1, length(cons)))\n    rv$letters <- sample(letters, size = n, replace = TRUE, prob = probs)\n    rv$words <- character()\n    rv$playing <- TRUE\n    rv$time <- Sys.time()\n    rv$score <- 0\n    rv$attempts <- 0\n    updateTextInput(session, \"entry\", value = \"\")\n    hide(\"play\")\n    show(\"controls\")\n    show(\"info\")\n  })\n  \n  \n  observe({\n    req(input$play)\n    invalidateLater(100, session)\n    d <- as.numeric(difftime(Sys.time(), rv$time, units = \"secs\"))\n    print(d)\n    if (d > time_allowed) {\n      rv$playing <- FALSE\n      hide(\"controls\")\n      show(\"play\")\n    }\n  })\n\n  \n  \n  observeEvent(input$submit, {\n    entry <- input$entry\n    rv$attempts <- rv$attempts + 1\n    updateTextInput(session, \"entry\", value = \"\")\n    check <- check_entry(entry = entry, letters = rv$letters)\n    repeated <- entry %in% rv$words\n    if (check$formable & check$is_word & !(repeated)) {\n      rv$words <- c(rv$words, entry)\n      rv$score <- rv$score + str_length(entry)\n    }\n    rv$results <- c(list(entry = entry, dup = repeated), check)\n    rv$attempts <- rv$attempts + 1\n  })\n  \n  \n  output$letters <- renderText({\n    letter_list <- str_c(rv$letters, collapse = \", \")\n    glue::glue(\"\n      Letters are:\n      \n      {letter_list}.\n                 \n      Submit a word made from these letters!\")\n  })\n  \n  output$response <- renderText({\n    rv$attempts\n    isolate({\n      res <- rv$results\n      prev <- str_c(rv$words, collapse = \"\\n\")\n      score <- rv$score\n      attempts <- rv$attempts\n    })\n    if (attempts == 0 & rv$playing) {\n      return(NULL)\n    }\n    if (attempts == 0 & !rv$playing) {\n      return(glue::glue(\"\n                        Time's up!  Words made:\n                        \n                        {prev}\"))\n    }\n    if (!rv$playing) {\n      initial <- \"Time's up! \"\n    }  else if (res$dup) {\n      initial <- glue::glue(\"\\\"{res$entry}\\\" has already been submitted. \")\n    } else if (res$formable & !(res$is_word)) {\n      initial <- glue::glue(\"\\\"{res$entry}\\\" is not a word. \")\n    } else if (!res$formable & !(res$is_word)) {\n      initial <- glue::glue(\n        \"\\\"{res$entry}\\\" isn't a word and can't be made from the letters. \")\n    } else if (!res$formable & (res$is_word)) {\n      initial <- glue::glue(\n        \"\\\"{res$entry}\\\" cannot be made from the given letters. \")\n    } else {\n      initial <- \"Good entry! \"\n    }\n    msg <- glue::glue(\n      \"{initial} Your score is {score}.  Words made so far:\n      \n      {prev}\"\n    )\n    msg\n  })\n  \n}\n\n\n## run app ----\nshinyApp(ui, server)","type":"text"}]
