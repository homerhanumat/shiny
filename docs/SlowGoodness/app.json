[{"name":"server.R","content":"library(shiny)\n\nsource(\"chisqGraph.R\")\n\n# Define server logic for SlowGoodness\nshinyServer(function(input, output,session) {\n  simLimit <- 10000\n\n  #Keep track of number of simulations in a given \"set-up\"\n  numberSims <- 0\n  chisqSims <- numeric()\n  latestSim <- NULL\n  fullSim <-character()\n  \n  #we also want the ability to refresh the \"set-up\n  total <- 0 #total number of sims over all set-ups including current one\n  totalPrev <- 0 #total number of sims over all set-ups excluding current one\n\n    \n  nullsInput <- reactive({\n    probs <- as.numeric(unlist(strsplit(input$nulls,split=\",\")))\n    probs\n  })\n  \n  obsInput <- reactive({\n    observed <- as.integer(unlist(strsplit(input$obs,split=\",\")))\n    observed \n  })\n  \n  namesInput <- reactive({\n    unlist(strsplit(input$names,split=\",\"))  \n  })\n  \n  \n  goodNulls <- reactive({\n    nulls <- nullsInput()\n    goodNulls <- TRUE\n    if (length(nulls) <= 1) goodNulls <- FALSE\n    anyMissing <- any(is.na(nulls))\n    if (anyMissing) goodNulls <- FALSE\n    if (!anyMissing && any(nulls <= 0)) goodNulls <- FALSE\n    if (!goodNulls) disable(\"resample\")\n    goodNulls     \n  })\n  \n  goodObs <- reactive({\n    obs <- obsInput()\n    goodObs <- TRUE\n    if (length(obs) <= 1) goodObs <- FALSE\n    if (any(is.na(obs))) goodObs <- FALSE\n    if (any(obs < 0)) goodObs <- FALSE\n    if (!goodObs) disable(\"resample\")\n    goodObs     \n  })\n  \n  goodNames <- reactive({\n    names <- namesInput()\n    goodNames <- TRUE\n    if (length(names) <= 1) goodNames <- FALSE\n    if (any(is.na(names))) goodNames <- FALSE\n    if (!goodNames) disable(\"resample\")\n    goodNames     \n  })\n  \n#   goodInput <- reactive({\n#     goodNulls() && goodObs() && goodNames()\n#   })\n\n  \n  obschisqInput <- reactive({\n    nulls <- nullsInput()/sum(nullsInput())\n    totalCounts <- sum(obsInput())\n    expected <- nulls*totalCounts\n    sum(obsInput()^2/expected)-totalCounts\n  })\n  \n  simsUpdate <- reactive({\n    if (input$resample > 0) {\n      nullProbs <- isolate(nullsInput()/sum(nullsInput()))\n      totalCounts <- isolate(sum(obsInput()))\n      expCounts <- nullProbs*totalCounts\n      reps <- min(simLimit,isolate(input$sims))\n      newSims <- rmultinom(n=reps,size=totalCounts,prob=nullProbs)\n      chisqNew <- colSums(newSims^2/expCounts)-totalCounts\n      chisqSims <<- c(chisqSims,chisqNew)\n      latestSim <<- newSims[,reps]\n      numberSims <<- numberSims + reps\n      total <<- total+reps\n      \n\n      hide(id=\"setup\",anim=T,animType=\"slide\")\n      \n      if (total - totalPrev == 1) {\n        updateTabsetPanel(session,\"myPanel\",selected=\"Latest Simulation\")\n      }\n    \n      \n      #now build fake list of outcomes for each trial, on the last sim\n      varLevels <- isolate(namesInput())\n      namesList <- rep(varLevels,times=latestSim)\n      fullSim <<- sample(namesList,size=totalCounts,replace=FALSE)\n      list(numberSims,latestSim)\n    }\n  })\n  \n  \n  #this erases the simulation history and puts user back to initial graph\n  simsReset <- reactive({\n    input$reset\n    totalPrev <<- totalPrev + numberSims\n    numberSims <<- 0\n    chisqSims <<- numeric()\n    latestSim <<- NULL\n    \n    if (total - totalPrev == 0) {\n      updateNumericInput(session,\"sims\", value = 1)\n    }\n    \n    show(id=\"setup\",anim=T,animType=\"slide\")\n    \n    \n    return(totalPrev)\n  })\n  \n\n  \n  dfInput <- reactive({\n    length(obsInput())-1\n  })\n  \n  \n  xmaxInput <- reactive({\n    qchisq(0.999,df=dfInput())\n  })\n\n  \n  #help with conditonal panals\n  output$totalPrev <- reactive({\n    simsReset()\n  })\n  \n  # needed for the conditional panels to work\n  outputOptions(output, 'totalPrev', suspendWhenHidden=FALSE)\n  \n  output$total <- reactive({\n    simsUpdate() #for dependency\n    total\n  })\n  \n  \n  # needed for the conditional panels to work\n  outputOptions(output, 'total', suspendWhenHidden=FALSE)\n  \n  output$barGraphInitial <- renderPlot({\n    \n    if (goodNulls()) enable(\"resample\") else disable(\"resample\")\n    validate(\n      need(goodNulls(),\"Enter at least two null probabilities.  They should all be positive numbers.\")\n      )\n    if (goodObs()) enable(\"resample\") else disable(\"resample\")\n    validate(\n      need(goodObs(),\"Enter at least two counts.  All counts should be non-negative integers.\")\n      )\n    if (goodNames()) enable(\"resample\") else disable(\"resample\")\n    validate(\n      need(goodNames(),\"Enter a name for each possible outcome being tallied.\")\n      )\n      \n    observed <- obsInput()\n    nulls <- nullsInput()/sum(nullsInput())\n    names <- namesInput()\n    \n    lengthCheck <- (length(nulls) == length(observed)) && (length(observed)==length(names))\n    if (lengthCheck) enable(\"resample\") else disable(\"resample\")\n    validate(\n      need(lengthCheck,\n        \"Make sure that you enter the same number of null probabilities, counts and names.\")\n      )\n    \n\n    \n    observed <- obsInput()\n    expected <- nulls*sum(observed)\n    tab <- rbind(observed,expected)\n    rownames(tab) <-c(\"Observed\",\"Expected\")\n    colnames(tab) <- names\n    barplot(tab,beside=T,col=c(\"#ee7700\",\"grey\"),\n            main=\"Bargraph of Observed and Expected Counts\",xlab=\"\",ylab=\"Counts\",\n            legend.text=TRUE)\n  })\n  \n  output$remarksInitial <- renderText({\n    \n    observed <- obsInput()\n    nulls <- nullsInput()/sum(nullsInput())\n    names <- namesInput()\n    \n    allGood <- (goodNulls() && goodObs()) && goodNames()\n    lengthCheck <- (length(nulls) == length(observed)) && (length(observed)==length(names))\n    \n    validate(\n      need(allGood && lengthCheck,\"\")\n      )\n    \n    chisq <- obschisqInput()\n    rounded1 <- round(chisq,2)\n    paste(\"Observed chi-square statistic =  \",as.character(rounded1),sep=\"\")\n  })\n  \n  output$obsTable <- renderTable({\n    \n    observed <- obsInput()\n    nulls <- nullsInput()/sum(nullsInput())\n    names <- namesInput()\n    \n    allGood <- (goodNulls() && goodObs()) && goodNames()\n    lengthCheck <- (length(nulls) == length(observed)) && (length(observed)==length(names))\n    \n    validate(\n      need(allGood && lengthCheck,\"\")\n    )\n    \n    expected <- nulls*sum(observed)\n    contribs <- (observed-expected)^2/expected\n    df <- data.frame(Levels=names,\n                     Observed=observed,\n                     Expected=round(expected,2),\n                     cont=round(contribs,2)\n                      )\n    names(df)[4] <- c(\"Contribution to Chi-Square\")\n    df\n  })\n  \n  output$remarksLatest1 <- renderText({\n    input$resample\n    chisq <- obschisqInput()\n    rounded1 <- round(chisq,2)\n    rounded2 <- round(chisqSims[length(chisqSims)],2)\n    paste(\"Observed chi-square statistic =  \",as.character(rounded1),\n          \", Latest resampled chi-square = \",as.character(rounded2),sep=\"\")\n  })\n  \n  output$remarksLatest2 <- renderText({\n    input$resample\n    chisq <- obschisqInput()\n    rounded1 <- round(chisq,2)\n    rounded2 <- round(chisqSims[length(chisqSims)],2)\n    paste(\"Observed chi-square statistic =  \",as.character(rounded1),\n          \", Latest resampled chi-square = \",as.character(rounded2),sep=\"\")\n  })\n\n  \n  output$barGraphLatest <- renderPlot({\n    input$resample\n    if (length(chisqSims) > 0) {\n      totalCounts <- isolate(sum(obsInput()))\n      nulls <- isolate(nullsInput()/sum(nullsInput()))\n      expected <- totalCounts*nulls\n      tab <- rbind(obsInput(),expected,latestSim)\n      rownames(tab) <-c(\"Observed\",\"Expected\",\"Resampled\")\n      colnames(tab) <- isolate(namesInput())\n      barplot(tab,beside=T,col=c(\"#ee7700\",\"grey\",\"#3333ff\"),\n            main=\"Bargraph of Observed, Expected, and Latest Resample\",xlab=\"\",\n            ylab=\"Counts\",\n            legend.text=TRUE)\n    }\n    \n  })\n  \n  chisqDensities <- reactive({\n    input$resample\n    if (length(chisqSims)==1) band <- 1 else band <- \"nrd0\"\n    density(chisqSims,n=500,from=0,to=xmaxInput(),bw=band)\n  })\n  \n  \n  output$densityplot <-\n    renderPlot({\n      input$resample\n      dchisq <- chisqDensities()\n      plot(dchisq$x,dchisq$y,type=\"l\",col=\"blue\",\n           xlab=\"Chi-Square Value\",ylab=\"Estimated Density\",\n           main=\"Distribution of Resampled Chi-Square Statistics\")\n      if (length(chisqSims) <= 200) rug(chisqSims)\n      latest <- chisqSims[length(chisqSims)]\n      points(latest,0,col=\"blue\",pch=19)\n      abline(v=isolate(obschisqInput()))\n    })\n  \n#   output$densityplot <-\n#     renderPlot({\n#     input$resample\n#     if (length(chisqSims)==1) band <- 1 else band <- \"nrd0\"\n#     dchisq <- density(chisqSims,n=500,from=0,to=xmaxInput(),bw=band)\n#     plot(dchisq$x,dchisq$y,type=\"l\",col=\"blue\",\n#          xlab=\"Chi-Square Value\",ylab=\"Estimated Density\",\n#          main=\"Distribution of Resampled Chi-Square Statistics\")\n#     if (length(chisqSims) <= 200) rug(chisqSims)\n#     latest <- chisqSims[length(chisqSims)]\n#     points(latest,0,col=\"blue\",pch=19)\n#     abline(v=isolate(obschisqInput()))\n#     \n#     })\n  \n  output$summary1 <- renderTable({\n    input$resample\n    obs <- isolate(obschisqInput())\n    if (length(chisqSims) >0) {\n    n <- length(chisqSims)\n      latest <- chisqSims[n]\n      p.value <- length(chisqSims[chisqSims>=obs])/n\n      percentage <- paste(as.character(round(p.value*100,2)),\"%\",sep=\"\")\n      df <- data.frame(round(latest,2),n,percentage)\n      names(df) <- c(\"Last Resampled Chi-Square\",\n                   \"Number of Resamples So Far\",\n                   paste(\"Percent Above \",round(obs,2),sep=\"\")\n      )\n      df  \n    }\n  })\n  \n  output$remarksProbBar <- renderText({\n    obs <- obschisqInput()\n    paste0(\"The percentage in the table gives the approximate probability, based on our resamples so far, of getting a chi-square statistic of \",\n           round(obs,2),\" or more, if the probability of each outcome is as the Null probabilities state.\",\n           \"  The more resamples you take the better this approximations will be!\")\n  })\n  \n  \n  output$summary2 <- renderTable({\n    input$resample\n    obs <- isolate(obschisqInput())\n    n <- length(chisqSims)\n    latest <- chisqSims[n]\n    p.value <- length(chisqSims[chisqSims>=obs])/n\n    percentage <- paste(as.character(round(p.value*100,2)),\"%\",sep=\"\")\n    df <- data.frame(round(latest,2),n,percentage)\n    names(df) <- c(\"Last Resampled Chi-Square\",\n                   \"Number of Resamples So Far\",\n                   paste(\"Percent Above \",round(obs,2),sep=\"\")\n                  )\n    df    \n  })\n  \n  output$remarksProbDensity <- renderText({\n    obs <- obschisqInput()\n    paste0(\"The curve above approximates the true probability distribution of the chi-square statistic.\",\n           \" It is based on our resamples so far.  The percentage in the table gives the approximate probability, based on our resamples so far, of getting a chi-square statistic of \",\n           round(obs,2),\" or more, if the probability of each outcome is as the Null probabilities state.\",\n           \"  The more resamples you take the better these approximations will be!\")\n  })\n  \n  \n  output$chisqCurve <- renderPlot({\n      obs <- obschisqInput()\n      degFreedom <- dfInput()\n      chisqGraph(bound=obs,region=\"above\",df=degFreedom,xlab=\"Chi-Square Values\",\n                 graph=TRUE)\n    abline(v=obs)\n    if (input$compareDen) {\n      lines(chisqDensities(),col=\"blue\",lwd=4)\n    }\n  })\n  \n  output$remarksProb <- renderText({\n    obs <- obschisqInput()\n    paste0(\"The curve above approximates the true probability distribution of the chi-square statistic.\",\n             \" The shaded area gives the approximate probability of getting a chi-square statistic of \",\n             round(obs,2),\" or more, if the probability of each outcome is as the Null probabilities state.\")\n  })\n  \n})\n  \n","type":"text"},{"name":"ui.R","content":"library(shiny)\nlibrary(shinyjs)\nlibrary(shinythemes)\n# Define UI for SlowGoodness application\nfluidPage(\n  useShinyjs(),\n  # Application title\n  titlePanel(\"Chi-Square Goodness-of-Fit Resampling\"),\n  theme = shinytheme(\"cerulean\"),\n  # Sidebar\n  sidebarPanel(\n#   conditionalPanel(\n#      condition=\"input.resample == 0 || output.totalPrev == output.total\",\n    inputPanel(id=\"setup\",\n      helpText(\"Enter the probabilities as decimal numbers.\",\n                  \"If they do not sum to 1, then the\",\n                  \"application will re-scale them for you.\"),\n      textInput(\"nulls\",\"Null Probabilities (separated by commas)\",\n                \".17,.17,.17,.17,.17,.17\"),\n      textInput(\"obs\",\"Enter Observed Counts (separated by commas)\",\n                \"8,18,11,7,9,7\"),\n      textInput(\"names\",\"Enter Level Names (separated by commas)\",\n                \"One,Two,Three,Four,Five,Six\")\n    ),\n    helpText(\"One simulation means the machine will produce one table of\",\n             \"counts, using the Null probabilities. How many simulations do\",\n             \"you want the machine to perform at once? (Limit is 10000.)\"),\n    numericInput(\"sims\",\"Number of Simulations at Once\",1,min=0,step=1),\n    actionButton(\"resample\",\"Simulate Now\"),\n    conditionalPanel(\n      condition=\"(input.resample > 0 && input.reset == 0) || output.total > output.totalPrev\",\n      actionButton(\"reset\",\"Start Over\")\n    )\n  ),\n  # Here comes the main panel\n  # Here comes the main panel\n  mainPanel(\n    conditionalPanel(\n      condition=\"input.resample == 0 || output.totalPrev == output.total\",\n      plotOutput(\"barGraphInitial\"),\n      p(textOutput(\"remarksInitial\")),\n      tableOutput(\"obsTable\")\n    ),\n    conditionalPanel(\n      condition=\"(input.resample > 0 && input.reset == 0) || output.total > output.totalPrev\",\n      tabsetPanel(selected=\"Latest Simulation\",\n                  tabPanel(\"Latest Simulation\",\n                           plotOutput(\"barGraphLatest\"),\n                           p(textOutput(\"remarksLatest1\")),\n                           tableOutput(\"summary1\"),\n                           p(textOutput(\"remarksProbBar\"))),\n                  tabPanel(\"Density Plot of Simulations\",\n                           plotOutput(\"densityplot\"),\n                           p(textOutput(\"remarksLatest2\")),\n                           tableOutput(\"summary2\"),\n                           p(textOutput(\"remarksProbDensity\"))),\n                  tabPanel(\"Probability Distribution\",\n                           plotOutput(\"chisqCurve\"),\n                           br(),\n                           checkboxInput(\"compareDen\",\n                            HTML(\"Compare with simulated <br>chi-square distribution\")),\n                           p(textOutput(\"remarksProb\"))\n                  ),\n                  id=\"myPanel\"\n      )\n    )\n  )\n)","type":"text"},{"name":"chisqGraph.R","content":"# Modified from pchisqGC.R in package tigerstats\n\nchisqGraph <- function(bound,region=\"above\",df=NA,xlab=\"chi_square_statistic\",graph=FALSE) {\n  if (!is.numeric(bound)) stop(\"Specify a numerical boundary\")\n  if (bound < 0)  stop(\"The chi-square statistic must be at least 0\")\n  if (is.na(df)) stop(\"Specify the degrees of freedom using the argument df\")\n  if (!(region %in% c(\"below\",\"above\"))) stop(\"Specify either \\\"region=\\\"below\\\" or\n\\\"region=\\\"above\\\"\")\n  if (df < 0) stop(\"Degrees of freedom must be positive\")\n\n  if (region==\"below\")  {\n    area <- pchisq(bound,df=df)\n    if (graph && df==1) warning(\"No graph produced for region below when df=1\")\n    if (graph) {\n    bound <- round(bound,2)\n    upper <- max(qchisq(.9999,df=df),bound+1)\n    lower <- 0\n    curve(dchisq(x,df=df),from=lower,to=upper,ylab=\"density\",axes=FALSE,n=501,xlab=xlab,\n          main=paste(\"Chi-Square Curve, df = \",df,\"\\nShaded Area = \",round(area,4)))\n    axis(1,at=c(lower,bound,upper),labels=c(as.character(0),as.character(bound),\"\"))\n    axis(2)\n   x.coords <- c(lower,seq(lower,bound,length.out=301),bound)\n   y.coords <- c(0,dchisq(seq(lower,bound,length.out=301),df=df),0)\n   polygon(x.coords,y.coords,col=\"lightblue\",cex=2)\n    }\n  }\n\n  if (region==\"above\")  {\n    area <- pchisq(bound,df=df,lower.tail=FALSE)\n    if (graph) {\n    bound <- round(bound,2)\n    upper <- max(qchisq(.9999,df=df),bound+1)\n    lower <- 0\n    curve(dchisq(x,df=df),from=lower,to=upper,ylab=\"density\",axes=FALSE,n=501,xlab=xlab,\n          main=paste(\"Chi-Square Curve, df = \",df,\"\\nShaded Area = \",round(area,4)))\n    axis(1,at=c(lower,bound,upper),labels=c(as.character(0),as.character(bound),\"\"))\n    axis(2)\n    x.coords <- c(bound,seq(bound,upper,length.out=301),upper)\n    y.coords <- c(0,dchisq(seq(bound,upper,length.out=301),df=df),0)\n    polygon(x.coords,y.coords,col=\"lightblue\",cex=2)\n    }\n  }\n  \n \n\n}#end of chisqGraph","type":"text"}]
