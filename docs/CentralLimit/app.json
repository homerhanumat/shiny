[{"name":"server.R","content":"library(shiny)\n\n########################################\n#  Utility Functions for Generating Pareto Values\n########################################\n\nrpareto <- function(n,alpha,theta) {#random values for Pareto(alpha,theta) distribution\n  theta*((1-runif(n))^(-1/alpha)-1)\n}\n\ndpareto <- function(x,alpha,theta) {  #pdf for Pareto(alpha,theta) distribution\n  alpha*theta^alpha/(x+theta)^(alpha+1)\n}\n\n\n#############################################\n# Generate the populations\n############################################\nmuNorm <- 70\nsigmaNorm <- 5\nshapeGamma <- 2\nscaleGamma <- 50\n\n# for pareto:\nalphaPareto <- 5\nthetaPareto <- 100\ntailProb <- 0.02  #want to find a Value at risk of 1 - this\nvalRisk <- thetaPareto*(tailProb^(-.5)-1)\n\n# for pop with group of outliers\npropOutliers <- 0.10\nmeanOutliers <- 200\nsdOutliers <- 5\nmeanRegulars <- 50\nsdRegulars <- 5\n\nroutlier <- function(n) {\n  propNormals <- 1- propOutliers\n  whichHump <- rbinom(n,size=1,prob=propNormals)\n  outlierSamp <- ifelse(whichHump,rnorm(n,mean=meanRegulars,sd=sdRegulars),\n                        rnorm(n,mean=meanOutliers,sd=sdOutliers))\n  outlierSamp\n}\n\n######################################\n# Make population densities\n#####################################\nxNorm <- seq(muNorm-5*sigmaNorm,muNorm+5*sigmaNorm,length.out=600)\nyNorm <- dnorm(xNorm,mean=muNorm,sd=sigmaNorm)\nnormalDen <- list(x=xNorm,y=yNorm)\n\nxSkew <- seq(0,shapeGamma*scaleGamma+7.5*sqrt(shapeGamma)*scaleGamma,\n             length.out=600)\nySkew <- dgamma(xSkew,shape=shapeGamma,scale=scaleGamma)\nskewDen <- list(x=xSkew,y=ySkew)\n\nxSuperSkew <- seq(0,valRisk,length.out=600)\nySuperSkew <- dpareto(xSuperSkew,alpha=alphaPareto,theta=thetaPareto)\nsuperSkewDen <- list(x=xSuperSkew,y=ySuperSkew)\n\nxOut <- seq(0,meanOutliers+5*sdOutliers,length.out=600)\nyOut <- (1-propOutliers)*dnorm(xOut,mean=meanRegulars,sd=sdRegulars)+propOutliers*dnorm(xOut,mean=meanOutliers,sd=sdOutliers)\noutlierDen <- list(x=xOut,y=yOut)\n\n#######################################\n# Get the population means\n######################################\n\nnormalMean <- muNorm\nskewMean <- shapeGamma*scaleGamma\nsuperSkewMean <- thetaPareto/(alphaPareto - 1)\noutlierMean <- (1-propOutliers)*meanRegulars+propOutliers*meanOutliers\n\n###########################\n# Get population standard deviations\n##########################\n\nnormalSD <- sigmaNorm\nskewSD <- sqrt(shapeGamma)*scaleGamma\na <- alphaPareto\nsuperSkewSD <- thetaPareto*sqrt(a/((a-1)^2*(a-2)))\noutlierSD <- sqrt((1-propOutliers)*sdRegulars+propOutliers*sdOutliers+(meanOutliers-meanRegulars)^2*propOutliers*(1-propOutliers))\n\n# Define server logic\nshinyServer(function(input, output) {\n  \n  popDen <- reactive({\n    switch(input$popDist,\n           normal=normalDen,\n           skew=skewDen,\n           superskew=superSkewDen,\n           outliers=outlierDen)\n  })\n  \n  popMean <- reactive({\n    switch(input$popDist,\n           normal=normalMean,\n           skew=skewMean,\n           superskew=superSkewMean,\n           outliers=outlierMean)\n  })\n  \n  popSD <- reactive({\n    switch(input$popDist,\n           normal=normalSD,\n           skew=skewSD,\n           superskew=superSkewSD,\n           outliers=outlierSD)\n  })\n  \n  popMax <- reactive({\n    switch(input$popDist,\n           normal=max(normalDen$x),\n           skew=max(skewDen$x),\n           superskew=max(superSkewDen$x),\n           outliers=max(outlierDen$x)\n    )\n  })\n  \n  popMin <- reactive({\n    switch(input$popDist,\n           normal=min(normalDen$x),\n           skew=min(skewDen$x),\n           superskew=min(superSkewDen$x),\n           outliers=min(outlierDen$y)\n    )\n  })\n  \n  yMax <- reactive({\n    densities <- popDen()\n    max(densities$y)*1.5\n  })\n  \n\n  simLimit <- 10000 #upper limit on number of sims at once\n  \n  #Keep track of number of simulations in a given \"set-up\"\n  numberSims <- 0\n  xbars <- numeric()\n  latestSamp <- numeric()\n  latestMean <- numeric()\n  \n  #we also want the ability to refresh the \"set-up\n  total <- 0 #total number of sims over all set-ups including current one\n  totalPrev <- 0 #total number of sims over all set-ups excluding current one\n  \n  simsUpdate <- reactive({\n    if (input$resample > 0) {\n\n\n      reps <- min(simLimit,isolate(input$sims))\n      total <<- total + reps\n      numberSims <<- numberSims + reps\n      \n      popMean <- isolate(popMean())\n      n <- isolate(input$n)\n      \n      itemNumb <- reps*n\n      sampleItems <- isolate(\n        switch(input$popDist,\n               normal=rnorm(itemNumb,mean=muNorm,sd=sigmaNorm),\n               skew=rgamma(itemNumb,shape=shapeGamma,scale=scaleGamma),\n               superskew=rpareto(itemNumb,alpha=alphaPareto,theta=thetaPareto),\n               outliers=routlier(itemNumb)\n        ))\n      \n      sampleMatrix <- matrix(sampleItems,ncol=n,nrow=reps)\n      \n      latestSamp <<- sampleMatrix[reps,]\n      latestMean <<- mean(latestSamp)\n      \n      newMeans <- rowSums(sampleMatrix)/n\n      \n      xbars <<- c(xbars,newMeans)\n      \n    } #end if resample\n      \n  })\n  \n  #this erases the simulation history and puts user back to initial graph\n  simsReset <- reactive({\n    input$reset\n    totalPrev <<- totalPrev + numberSims\n    numberSims <<- 0\n    xbars <<- numeric()\n    latestSamp <<- numeric()\n    latestMean <<- numeric()\n    return(totalPrev)\n  })\n  \n  #help with conditonal panals\n  output$totalPrev <- reactive({\n    simsReset()\n  })\n  \n  # needed for the conditional panels to work\n  outputOptions(output, 'totalPrev', suspendWhenHidden=FALSE)\n  \n  output$total <- reactive({\n    simsUpdate() #for dependency\n    total\n  })\n  \n  # needed for the conditional panels to work\n  outputOptions(output, 'total', suspendWhenHidden=FALSE)\n  \n  \n  output$initialGraph <- renderPlot({\n    popDen <- popDen()\n    popMean <- popMean()\n    plot(popDen$x,popDen$y,type=\"l\",lwd=3,col=\"red\",\n         main=\"Density Curve of Population\",\n         xlab=\"\",\n         ylab=\"density\")\n    abline(v=popMean,lwd=2)\n    \n  })\n  \n  output$xbar <- renderPlot({\n    input$resample\n    n <- isolate(input$n)\n    mu <- isolate(popMean())\n    sigma <- isolate(popSD())\n    sdMean <- sigma/sqrt(n)\n    lower <- mu - 5*sdMean\n    upper <- mu + 5*sdMean\n    if (numberSims == 1) {\n      xbarDen <- density(xbars,n=1024,bw=1)\n    }\n    if (numberSims >= 2 && n < 5) {\n      xbarDen <- density(xbars,n=1024,bw=0.1)\n    }\n    if (numberSims >= 2 && n >= 5) {\n      xbarDen <- density(xbars,n=1024,bw=\"SJ\")\n    }\n    \n    if (numberSims > 0) {\n    ymax <- max(xbarDen$y,dnorm(mu,mean=mu,sd=sdMean))\n    plot(xbarDen$x,xbarDen$y,type=\"l\",lwd=2,col=\"blue\",\n         main=\"x-bar vs. normal curve\",cex.main=2,\n         xlab=\"x-bar\", ylim=c(0,ymax),xlim=c(lower,upper),\n         ylab=\"density\")\n    curve(dnorm(x,mean=mu,sd=sdMean),xlim=c(lower,upper),col=\"red\",lwd=2,add=TRUE)\n    if (numberSims <= 50) {\n      rug(xbars)\n    }\n    points(latestMean, 0, col = \"blue\", pch = 20,cex=2)\n    } #end check that there are samples\n    \n  })\n  \n  output$graphSample <- renderPlot({\n    input$resample #for the dependency\n    if(numberSims > 0) {\n    popDen <- isolate(popDen())\n    popMean <- isolate(popMean())\n    n <- isolate(input$n)\n    \n    samp <- latestSamp\n    \n    \n    xmin <- isolate(popMin())\n    xmax <- isolate(popMax())\n    ymax <- isolate(yMax())\n    \n    xbar <- latestMean\n    \n    hist(samp,freq=FALSE,col=\"lightblue\",xlim=c(xmin,xmax),\n         ylim=c(0,ymax),\n         main=\"Population Density Curve\\nand Histogram of Sample\",\n         xlab=\"x\",\n         cex.main=2,cex.sub=2\n    )\n    lines(popDen,lwd=2,col=\"red\")\n    abline(v=popMean,lwd=2)\n    points(xbar, 0, col = \"blue\", pch = 20,cex=2)\n    \n    } # end checking that we have a latest sample\n    \n  })\n\n  \n})\n  ","type":"text"},{"name":"ui.R","content":"library(shiny)\nlibrary(shinythemes)\n\n# Define UI for testing application\nfluidPage(\n  \n  #  Application title\n  titlePanel(\"The Central Limit Theorem\"),\n  theme = shinytheme(\"cerulean\"),\n  # Sidebar\n  sidebarPanel(\n    conditionalPanel(\n      condition=\"input.resample == 0 || output.totalPrev == output.total\",\n      selectInput(inputId=\"popDist\",label=\"Population Shape\",\n                choices=list(\"Normal\"=\"normal\",\n                             \"Skewy\"=\"skew\",\n                             \"REALLY Skewed\"=\"superskew\",\n                             \"Way-Out Outlier Group\"=\"outliers\")),\n      br(),\n    \n      helpText(\"Choose the sample size.\"),\n    \n      sliderInput(inputId=\"n\",\"Sample Size n\",value=2,min=2,max=50,step=1),\n      br()\n    ),\n      helpText(\"How many samples would you like to take at one time?  Limit is 10000. We will \",\n             \"compute the mean of each sample.\"),\n      numericInput(\"sims\",\"Number of Samples at Once\",1,min=0,step=1),\n      actionButton(\"resample\",\"Sample Now\"),\n      conditionalPanel(\n        condition=\"(input.resample > 0 && input.reset == 0) || output.total > output.totalPrev\",\n        actionButton(\"reset\",\"Start Over\")\n      )\n    \n  ),\n  \n  \n  # Here comes the main panel\n  \n  mainPanel(\n    \n    conditionalPanel(\n      condition=\"input.resample == 0 || output.totalPrev == output.total\",\n      plotOutput(\"initialGraph\")\n    ),\n\n    \n    conditionalPanel(\n      condition=\"(input.resample > 0 && input.reset == 0) || output.total > output.totalPrev\",\n      \n      tabsetPanel(\n        tabPanel(\"Latest Sample\",\n                 plotOutput(\"graphSample\"),\n                 HTML(\"<p> <\/p>\"),\n                 HTML(\"<ul>\n                        <li>The population density curve is in red.<\/li>\n                        <li>The vertical line marks the population mean.<\/li>\n                        <li>The histogram of the sample is in light blue.<\/li>\n                        <li>The sample mean is the big blue dot.<\/li>\n                      <\/ul>\")),\n        tabPanel(\"Sample Mean Distribution\",\n                 plotOutput(\"xbar\"),\n                 HTML(\n                   \"<p>The plots above compare the distribution of the sample means so far to a normal curve.<\/p>\n                     <p><\/p>\n                     <ul>\n                        <li>The normal curve is in red.  If the population is exactly normal, then this curve represents the exact distribution of the sample mean.<\/li>\n                        <li>A density plot of the sample means is in blue.  This plot gives a pretty good estimate of the distribution of the sample mean, for the population and sample size that you have selected.<\/li>\n                        <li>The rug at the bottom of the plot gives individual sample means found so far (if there are no more than 50).  The latest one is marked with a large blue dot.<\/li>\n                    <\/ul>\"))\n      ) # end tabset panel\n    ) # end conditonal panel\n    \n  ) # end main panel\n  \n)\n","type":"text"}]
